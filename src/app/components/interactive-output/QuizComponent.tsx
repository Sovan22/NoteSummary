'use client';

import { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Card,
  CardContent,
  Radio,
  RadioGroup,
  FormControlLabel,
  FormControl,
  Button,
  Divider,
  Chip,
  CircularProgress,
  Alert,
  Snackbar,
  LinearProgress
} from '@mui/material';
import {
  Check as CorrectIcon,
  Close as WrongIcon,
  Refresh as RefreshIcon
} from '@mui/icons-material';

interface QuizQuestion {
  id: string;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
}

interface QuizComponentProps {
  contentTitle?: string;
}

export default function QuizComponent({ contentTitle }: QuizComponentProps) {
  // In a real application, these would be generated by AI
  const sampleQuestions: QuizQuestion[] = [
    {
      id: 'q1',
      question: 'Which of the following is NOT a type of machine learning?',
      options: [
        'Supervised Learning',
        'Unsupervised Learning',
        'Reinforcement Learning',
        'Directed Learning'
      ],
      correctAnswer: 3,
      explanation: 'The main types of machine learning are Supervised Learning, Unsupervised Learning, and Reinforcement Learning. "Directed Learning" is not a standard type of machine learning.'
    },
    {
      id: 'q2',
      question: 'Which algorithm is commonly used for classification problems?',
      options: [
        'Linear Regression',
        'K-means Clustering',
        'Random Forest',
        'Principal Component Analysis'
      ],
      correctAnswer: 2,
      explanation: 'Random Forest is a popular algorithm for classification tasks. Linear Regression is used for regression problems, K-means is for clustering, and PCA is for dimensionality reduction.'
    },
    {
      id: 'q3',
      question: 'What is the purpose of the activation function in neural networks?',
      options: [
        'To initialize the weights',
        'To introduce non-linearity',
        'To normalize the input data',
        'To reduce overfitting'
      ],
      correctAnswer: 1,
      explanation: 'Activation functions introduce non-linearity into neural networks, allowing them to learn complex patterns. Without activation functions, neural networks would be equivalent to linear regression regardless of depth.'
    },
    {
      id: 'q4',
      question: 'What does the term "epoch" refer to in machine learning?',
      options: [
        'A specific point in time',
        'One complete pass through the entire training dataset',
        'The learning rate of the algorithm',
        'The size of the validation set'
      ],
      correctAnswer: 1,
      explanation: 'In machine learning, an "epoch" refers to one complete pass through the entire training dataset during the training process.'
    }
  ];

  const [questions, setQuestions] = useState<QuizQuestion[]>(sampleQuestions);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [isAnswered, setIsAnswered] = useState(false);
  const [score, setScore] = useState(0);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showSnackbar, setShowSnackbar] = useState(false);

  const currentQuestion = questions[currentQuestionIndex];

  const handleAnswerSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSelectedAnswer(Number(event.target.value));
  };

  const handleSubmitAnswer = () => {
    if (selectedAnswer === null) return;

    setIsAnswered(true);
    if (selectedAnswer === currentQuestion.correctAnswer) {
      setScore(score + 1);
    }
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedAnswer(null);
      setIsAnswered(false);
    } else {
      setQuizCompleted(true);
    }
  };

  const handleRestartQuiz = () => {
    setCurrentQuestionIndex(0);
    setSelectedAnswer(null);
    setIsAnswered(false);
    setScore(0);
    setQuizCompleted(false);
  };

  const handleGenerateNewQuiz = () => {
    setIsGenerating(true);
    
    // In a real application, this would call the AI backend to generate questions
    setTimeout(() => {
      // We're just reshuffling the existing questions for demonstration
      setQuestions([...questions].sort(() => Math.random() - 0.5));
      setCurrentQuestionIndex(0);
      setSelectedAnswer(null);
      setIsAnswered(false);
      setScore(0);
      setQuizCompleted(false);
      setIsGenerating(false);
      setShowSnackbar(true);
    }, 2000);
  };

  const handleCloseSnackbar = () => {
    setShowSnackbar(false);
  };

  return (
    <Paper elevation={3} sx={{ p: 4, borderRadius: 4, mt: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h5">
          Quiz
        </Typography>
        
        <Button
          variant="outlined"
          startIcon={<RefreshIcon />}
          onClick={handleGenerateNewQuiz}
          disabled={isGenerating}
        >
          {isGenerating ? 'Generating...' : 'Generate New Quiz'}
        </Button>
      </Box>
      
      {contentTitle && (
        <Typography variant="subtitle1" color="text.secondary" gutterBottom>
          {contentTitle}
        </Typography>
      )}
      
      {isGenerating ? (
        <Box sx={{ mt: 4, mb: 4 }}>
          <Typography variant="body1" gutterBottom>
            Generating new quiz questions...
          </Typography>
          <LinearProgress sx={{ mt: 2 }} />
        </Box>
      ) : quizCompleted ? (
        <Box sx={{ textAlign: 'center', py: 4 }}>
          <Typography variant="h4" gutterBottom>
            Quiz Completed!
          </Typography>
          <Typography variant="h6" gutterBottom>
            Your Score: {score} / {questions.length}
          </Typography>
          <CircularProgress
            variant="determinate"
            value={(score / questions.length) * 100}
            size={80}
            thickness={4}
            sx={{ my: 3 }}
          />
          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>
            <Button
              variant="contained"
              color="primary"
              onClick={handleRestartQuiz}
              sx={{ mr: 2 }}
            >
              Restart Quiz
            </Button>
            <Button
              variant="outlined"
              onClick={handleGenerateNewQuiz}
            >
              New Questions
            </Button>
          </Box>
        </Box>
      ) : (
        <Box>
          <LinearProgress
            variant="determinate"
            value={(currentQuestionIndex / questions.length) * 100}
            sx={{ mb: 3 }}
          />
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
            <Chip 
              label={`Question ${currentQuestionIndex + 1}/${questions.length}`}
              color="primary"
              variant="outlined"
            />
            <Chip 
              label={`Score: ${score}`}
              color="secondary"
            />
          </Box>
          
          <Card elevation={2} sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                {currentQuestion.question}
              </Typography>
              
              <FormControl component="fieldset" sx={{ width: '100%', mt: 2 }}>
                <RadioGroup
                  value={selectedAnswer}
                  onChange={handleAnswerSelect}
                >
                  {currentQuestion.options.map((option, index) => (
                    <FormControlLabel
                      key={index}
                      value={index}
                      control={<Radio />}
                      label={option}
                      disabled={isAnswered}
                      sx={{
                        p: 1,
                        borderRadius: 1,
                        ...(isAnswered && index === currentQuestion.correctAnswer && {
                          bgcolor: 'success.light',
                        }),
                        ...(isAnswered && selectedAnswer === index && selectedAnswer !== currentQuestion.correctAnswer && {
                          bgcolor: 'error.light',
                        }),
                      }}
                    />
                  ))}
                </RadioGroup>
              </FormControl>
            </CardContent>
          </Card>
          
          {isAnswered && (
            <Alert 
              severity={selectedAnswer === currentQuestion.correctAnswer ? "success" : "error"}
              icon={selectedAnswer === currentQuestion.correctAnswer ? <CorrectIcon /> : <WrongIcon />}
              sx={{ mb: 3 }}
            >
              <Typography variant="body1" gutterBottom>
                {selectedAnswer === currentQuestion.correctAnswer 
                  ? "Correct!" 
                  : `Incorrect. The correct answer is: ${currentQuestion.options[currentQuestion.correctAnswer]}`}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {currentQuestion.explanation}
              </Typography>
            </Alert>
          )}
          
          <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
            {!isAnswered ? (
              <Button
                variant="contained"
                color="primary"
                onClick={handleSubmitAnswer}
                disabled={selectedAnswer === null}
              >
                Submit Answer
              </Button>
            ) : (
              <Button
                variant="contained"
                color="primary"
                onClick={handleNextQuestion}
              >
                {currentQuestionIndex < questions.length - 1 ? 'Next Question' : 'See Results'}
              </Button>
            )}
          </Box>
        </Box>
      )}
      
      <Snackbar
        open={showSnackbar}
        autoHideDuration={3000}
        onClose={handleCloseSnackbar}
        message="New quiz generated successfully!"
      />
    </Paper>
  );
}
