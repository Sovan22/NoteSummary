'use client';

import { useState } from 'react';
import { 
  Box, 
  Paper, 
  Typography, 
  ToggleButtonGroup, 
  ToggleButton, 
  Skeleton,
  Chip,
  IconButton,
  Tooltip,
  LinearProgress
} from '@mui/material';
import {
  ShortText as ShortIcon,
  Article as MediumIcon,
  Description as DetailedIcon,
  Refresh as RefreshIcon
} from '@mui/icons-material';

type SummaryLength = 'short' | 'medium' | 'detailed';

interface SummaryViewProps {
  contentTitle?: string;
  contentSource?: string;
  isProcessing?: boolean;
}

export default function SummaryView({ 
  contentTitle = 'Understanding Machine Learning Algorithms', 
  contentSource = 'Sample PDF',
  isProcessing = false 
}: SummaryViewProps) {
  const [summaryLength, setSummaryLength] = useState<SummaryLength>('medium');
  
  // In a real application, these would be generated by AI based on the content
  const summaries = {
    short: "Machine learning algorithms are computational methods that enable systems to learn patterns from data and make predictions without explicit programming. Key algorithms include supervised learning (classification, regression), unsupervised learning (clustering, dimensionality reduction), and reinforcement learning.",
    
    medium: "Machine learning algorithms are computational methods that enable systems to learn patterns from data and make predictions without explicit programming. The main categories are supervised learning (using labeled data for classification and regression), unsupervised learning (finding patterns in unlabeled data through clustering and dimensionality reduction), and reinforcement learning (learning optimal actions through reward-based feedback).\n\nPopular algorithms include linear regression, logistic regression, decision trees, random forests, support vector machines, k-means clustering, and neural networks. Each algorithm has specific strengths and weaknesses, making them suitable for different types of problems and datasets.",
    
    detailed: "Machine learning algorithms are computational methods that enable systems to learn patterns from data and make predictions without explicit programming. The field is broadly categorized into three main paradigms:\n\n1. Supervised Learning: Algorithms learn from labeled training data to predict outputs for unseen data. Common applications include:\n   - Classification: Categorizing inputs into discrete classes (e.g., spam detection)\n   - Regression: Predicting continuous values (e.g., house prices)\n   - Key algorithms: Linear/Logistic Regression, Decision Trees, Random Forests, Support Vector Machines, and Neural Networks\n\n2. Unsupervised Learning: Algorithms discover patterns in unlabeled data without predefined outputs. Main approaches include:\n   - Clustering: Grouping similar data points (e.g., customer segmentation)\n   - Dimensionality Reduction: Simplifying data while preserving information (e.g., PCA)\n   - Association Rule Learning: Finding relationships between variables\n   - Key algorithms: K-means, Hierarchical Clustering, DBSCAN, PCA, t-SNE\n\n3. Reinforcement Learning: Algorithms learn optimal actions through reward-based feedback in an environment. Used in:\n   - Game playing (e.g., AlphaGo)\n   - Robotics and control systems\n   - Recommendation systems\n   - Key algorithms: Q-Learning, Deep Q Network (DQN), Policy Gradient Methods\n\nThe selection of appropriate algorithms depends on factors such as data type, volume, quality, computational resources, interpretability requirements, and the specific problem domain. Modern approaches often combine multiple algorithms or use ensemble methods to improve performance."
  };

  const handleSummaryLengthChange = (
    event: React.MouseEvent<HTMLElement>,
    newLength: SummaryLength | null,
  ) => {
    if (newLength !== null) {
      setSummaryLength(newLength);
    }
  };

  const regenerateSummary = () => {
    // In a real app, this would trigger a new AI generation request
    console.log('Regenerating summary...');
  };

  return (
    <Paper elevation={3} sx={{ p: 4, borderRadius: 4 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h5">
          Summary
        </Typography>
        
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Chip 
            label={contentSource} 
            size="small" 
            sx={{ mr: 1 }} 
          />
          
          <Tooltip title="Regenerate summary">
            <IconButton onClick={regenerateSummary} disabled={isProcessing}>
              <RefreshIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>
      
      {contentTitle && (
        <Typography variant="subtitle1" color="text.secondary" gutterBottom>
          {contentTitle}
        </Typography>
      )}
      
      <ToggleButtonGroup
        value={summaryLength}
        exclusive
        onChange={handleSummaryLengthChange}
        aria-label="summary length"
        size="small"
        sx={{ mb: 3 }}
      >
        <ToggleButton value="short" aria-label="short summary">
          <ShortIcon sx={{ mr: 1 }} />
          Short
        </ToggleButton>
        <ToggleButton value="medium" aria-label="medium summary">
          <MediumIcon sx={{ mr: 1 }} />
          Medium
        </ToggleButton>
        <ToggleButton value="detailed" aria-label="detailed summary">
          <DetailedIcon sx={{ mr: 1 }} />
          Detailed
        </ToggleButton>
      </ToggleButtonGroup>
      
      {isProcessing ? (
        <Box>
          <LinearProgress sx={{ mb: 2 }} />
          <Skeleton variant="text" height={24} />
          <Skeleton variant="text" height={24} />
          <Skeleton variant="text" height={24} />
          <Skeleton variant="text" height={24} width="60%" />
        </Box>
      ) : (
        <Typography 
          variant="body1" 
          sx={{ 
            whiteSpace: 'pre-line',
            bgcolor: 'background.default', 
            p: 2, 
            borderRadius: 2
          }}
        >
          {summaries[summaryLength]}
        </Typography>
      )}
    </Paper>
  );
}
