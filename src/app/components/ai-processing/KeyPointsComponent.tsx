'use client';

import { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Chip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Divider,
  Button,
  Menu,
  MenuItem
} from '@mui/material';
import {
  KeyboardArrowDown as ArrowDownIcon,
  Flag as FlagIcon,
  Person as PersonIcon,
  Event as DateIcon,
  School as ConceptIcon,
  Functions as FormulaIcon,
  FilterAlt as FilterIcon
} from '@mui/icons-material';

type KeyPointType = 'important' | 'person' | 'date' | 'concept' | 'formula';

interface KeyPoint {
  id: string;
  text: string;
  type: KeyPointType;
}

interface KeyPointsComponentProps {
  contentTitle?: string;
}

export default function KeyPointsComponent({ contentTitle }: KeyPointsComponentProps) {
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedFilters, setSelectedFilters] = useState<KeyPointType[]>([]);
  
  // In a real application, these would be generated by AI
  const keyPoints: KeyPoint[] = [
    { id: '1', text: 'Machine learning algorithms learn patterns from data without explicit programming', type: 'important' },
    { id: '2', text: 'Geoffrey Hinton is considered one of the godfathers of deep learning', type: 'person' },
    { id: '3', text: 'The term "Machine Learning" was coined by Arthur Samuel in 1959', type: 'date' },
    { id: '4', text: 'Backpropagation is a key algorithm for training neural networks', type: 'concept' },
    { id: '5', text: 'Andrew Ng founded the Google Brain project and Coursera', type: 'person' },
    { id: '6', text: 'Gradient Descent: θ = θ - α∇J(θ)', type: 'formula' },
    { id: '7', text: 'AlphaGo defeated world champion Lee Sedol in 2016', type: 'date' },
    { id: '8', text: 'Overfitting occurs when models perform well on training data but poorly on new data', type: 'concept' },
    { id: '9', text: 'F1 Score = 2 * (Precision * Recall) / (Precision + Recall)', type: 'formula' },
    { id: '10', text: 'Transfer learning reuses pre-trained models for new tasks', type: 'important' },
  ];

  const handleFilterClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleFilterChange = (type: KeyPointType) => {
    setSelectedFilters(prev => 
      prev.includes(type) 
        ? prev.filter(t => t !== type) 
        : [...prev, type]
    );
  };

  const filteredPoints = selectedFilters.length === 0 
    ? keyPoints 
    : keyPoints.filter(point => selectedFilters.includes(point.type));

  const getIcon = (type: KeyPointType) => {
    switch (type) {
      case 'important':
        return <FlagIcon color="error" />;
      case 'person':
        return <PersonIcon color="primary" />;
      case 'date':
        return <DateIcon color="secondary" />;
      case 'concept':
        return <ConceptIcon style={{ color: '#009688' }} />;
      case 'formula':
        return <FormulaIcon style={{ color: '#ff9800' }} />;
    }
  };

  const getFilterColor = (type: KeyPointType) => {
    switch (type) {
      case 'important': return 'error';
      case 'person': return 'primary';
      case 'date': return 'secondary';
      case 'concept': return 'success';
      case 'formula': return 'warning';
    }
  };

  return (
    <Paper elevation={3} sx={{ p: 4, borderRadius: 4, mt: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h5">
          Key Points
        </Typography>
        
        <Button
          variant="outlined"
          size="small"
          endIcon={<ArrowDownIcon />}
          startIcon={<FilterIcon />}
          onClick={handleFilterClick}
        >
          Filter
        </Button>
        
        <Menu
          anchorEl={anchorEl}
          open={Boolean(anchorEl)}
          onClose={handleClose}
        >
          <MenuItem onClick={() => handleFilterChange('important')}>
            <ListItemIcon>
              <FlagIcon color="error" fontSize="small" />
            </ListItemIcon>
            <ListItemText>Important Points</ListItemText>
          </MenuItem>
          <MenuItem onClick={() => handleFilterChange('person')}>
            <ListItemIcon>
              <PersonIcon color="primary" fontSize="small" />
            </ListItemIcon>
            <ListItemText>People</ListItemText>
          </MenuItem>
          <MenuItem onClick={() => handleFilterChange('date')}>
            <ListItemIcon>
              <DateIcon color="secondary" fontSize="small" />
            </ListItemIcon>
            <ListItemText>Dates & Events</ListItemText>
          </MenuItem>
          <MenuItem onClick={() => handleFilterChange('concept')}>
            <ListItemIcon>
              <ConceptIcon style={{ color: '#009688' }} fontSize="small" />
            </ListItemIcon>
            <ListItemText>Concepts</ListItemText>
          </MenuItem>
          <MenuItem onClick={() => handleFilterChange('formula')}>
            <ListItemIcon>
              <FormulaIcon style={{ color: '#ff9800' }} fontSize="small" />
            </ListItemIcon>
            <ListItemText>Formulas</ListItemText>
          </MenuItem>
        </Menu>
      </Box>
      
      {contentTitle && (
        <Typography variant="subtitle1" color="text.secondary" gutterBottom>
          {contentTitle}
        </Typography>
      )}
      
      {selectedFilters.length > 0 && (
        <Box sx={{ mb: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
          {selectedFilters.map(filter => (
            <Chip 
              key={filter}
              label={filter.charAt(0).toUpperCase() + filter.slice(1)}
              color={getFilterColor(filter)}
              onDelete={() => handleFilterChange(filter)}
              size="small"
            />
          ))}
        </Box>
      )}
      
      <List sx={{ bgcolor: 'background.default', borderRadius: 2 }}>
        {filteredPoints.map((point, index) => (
          <Box key={point.id}>
            {index > 0 && <Divider component="li" />}
            <ListItem alignItems="flex-start">
              <ListItemIcon sx={{ minWidth: 42 }}>
                {getIcon(point.type)}
              </ListItemIcon>
              <ListItemText primary={point.text} />
            </ListItem>
          </Box>
        ))}
      </List>
    </Paper>
  );
}
